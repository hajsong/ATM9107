[
{
	"uri": "https://hajsong.github.io/ATM9107/python/about/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": " A quick introduction to python and its packages For more detailed information, see here\nFor a quick start, refer here\nIntroduction  Python has been gaining solid ground in earth sciences community. Python is light and efficient, while is able to do most of things that Matlab offers.  During the last couple of decades, Matlab has been the most commonly-used scripting language in physical oceanography, and it has a large user base in many other fields. Recently, however, Python has been gaining ground, often being adopted by former Matlab users as well as by newcomers. Here is a little background to help you understand this shift, and why we advocate using Python from the start.\nMatlab and Python    Matlab Python     expensive Free   Well-documented Major packages are well-documented   A wide range of functions is included Packages needs to be installed individually   Possibly more consistency within it Possible inconsistency between packages   fast Faster!!!    Why use Python instead of Matlab? Python is fundamentally a better computer language in many ways. It is suitable for a wider variety of tasks. It scales better from the shortest of scripts to large software projects. It facilitates writing clearer and more concise code. With associated tools, it makes for easier access to existing high-performance codes in compiled languages, and for using smaller pieces of compiled code to speed up critical sections. Because Python is Free and Open Source Software (FOSS), you can install it on any machine without having to deal with a license manager. For the same reason, Python code that is part of a research project can be run by anyone, anywhere, to verify or extend the results. Most Python packages you are likely to want to use are developed in an open environment. The scientific Python ecosystem is dynamic and friendly.\nWhat are the potential disadvantages? Installation of all the packages one needs can take time and expertise; but distributions like Anaconda, combined with other improvements in python packaging software and repositories, are rapidly solving this problem. Although progress is being made, the scientific Python stack is not as uniformly well-documented as Matlab; it might take longer to figure out how to do something in Python. You might also find that a routine available in Matlab is not yet available in a Python package. Matlab is still mainstream in oceanography–at least among many of the old guard; with Python, you are an early adopter. (If you have a spirit of adventure, this might be considered an advantage.)\nMatlab evolved from a simple scripting language designed to provide interactive access to a public-domain linear algebra library. It has since grown into a more sophisticated but still specialized language with an extensive set of routines written, organized, and documented by one of the great successes in the software world, Mathworks.\nPython, in contrast, was designed by a computer scientist as a general-purpose scripting language for easy adoption and widespread use. People tried it and liked it, and the result is that it is widely used throughout the software world, for all sorts of tasks, large and small. There is a vast array of Python packages that arem freely available to do all sorts of things—including the sorts of things that oceanographers and other scientists do; but these packages are not neatly bound up in a single product, and the documentation for the language itself and for the packages is similarly scattered and of varying quality.\nThe Python scientific stack for oceanography Essentials  numpy - N-dimensional arrays and functions for working with them. This is the heart of the scientific stack for Python.\n matplotlib - A two-dimensional plotting library with a Matlab-like interface.\n IPython - An interactive shell, and much more.\n jupyter notebook - A web interface to IPython, with integrated plots and rich text, including equations. (It can also be used with languages like R and Julia.)\n scipy - A large number of functions for statistics, linear algebra, integration, etc. It also includes functions for reading and writing Matlab’s binary matfiles.\n  Other packages of interest  pandas - Data structures inspired by R (Series, DataFrame, Panel), with associated functionality for fast and sophisticated indexing, subsetting, and calculations.\n Cython - A language with augmented Python syntax for writing compiled Python extensions. I use it for writing interfaces to code written in C, and for writing extensions to speed up critical operations.\n basemap - Matplotlib toolkit for making maps with any of a wide variety of projections. Matplotlib’s full plotting capabilities can then be used on the map.\n netCDF4 - Python interface to the NetCDF libraries, supporting the new version 4 in addition to the widespread version 3, and also supporting access to datasets via OPeNDAP.\n  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": "This is a tentative schedule and can be changed as we progress the semester.\n  week  content  lecture note  homework    1   Introduction      2   Numerical methods (parabolic, hyperbolic, ..)      3   Equation of motion      4   Shallow water model, 1D      5   Shallow water model, 2D      6   Quasi-geostrophic model 1      7   Quasi-geostrophic model 2      8   Midterm Exam      9   Ocean General circulation model, gyre      10   Ocean General circulation model, global ocean     11   Eddy parameterization      12   Ocean General circulation model, mixing      13   Ocean General circulation model, regional simulation      14   Lagrangian / Eulerian model      15   Model analysis : Budget analysis      16   Final week      "
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/week2/",
	"title": "Week 2",
	"tags": [],
	"description": "",
	"content": " Week 2 1D Stommel model : Link\n"
},
{
	"uri": "https://hajsong.github.io/ATM9107/python/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " The instructions are based on using the Anaconda software distribution, which provides platform-independent package management for Python and other software in self-contained user-specific environments.\n1. Acquire Anaconda (or Miniconda) This is highly recommended.\nDownload the Anaconda software from https://www.anaconda.com/download/#macos\nDocument for the software can be found here\nIf you choose to go with something light, you may consider getting miniconda.\nAnaconda or Miniconda? (from conda manual) Choose Anaconda if you:\n Are new to conda or Python. Like the convenience of having Python and over 150 scientific packages automatically installed at once. Have the time and disk space—a few minutes and 300 MB. Do not want to individually install each of the packages you want to use.  Choose Miniconda if you:\n Do not mind installing each of the packages you want to use individually. Do not have time or disk space to install over 150 packages at once. Want fast access to Python and the conda commands and you wish to sort out the other programs later.  2. Verify that you have python $ which python $ python --version  which dump out the following output in my case:\n/Users/hajsong/anaconda3/bin/python Python 3.7.0  If you want to install different version of python (e.g. python 3.6), you can create a new environment where python 3.6 becomes default version.\nconda create -n py36 python=3.6 anaconda  To activate this environment, use:\nsource activate py36  To deactivate an active environment, use:\nsource deactivate  In window,\nactivate myenv deactivate  If you want to remove the environment \u0026lsquo;py36\u0026rsquo;, try\nconda remove --name py36 --all  3. Install packages It is easy to manage (install and update) packages with Anaconda (or Miniconda). For instance, if you want to install numpy package,\nconda install numpy  If you want to update numpy package,\nconda update numpy  4. Ipython and Jupyter notebook Ipython provides an interactive environment for doing python.\nIt is included in the Anaconda software and you can visit its document page.\nIf you want to launch Jupyter notebook in one of your environments (e.g. py36), activate that environment first before starting Jupyter notebook.\nTo launch ipython, just do\nipython  To launch Jupyter notebook, type\njupyter notebook  5. Jupyter notebook on the remote server You might experience the delay of bringing the figure that you made remotely up on your local machine. This pain can be alleviated if you run Jupyter notebook on the remote server. Instead of opening up the web browser on the remote server, you can request the export the content to the port.\nTo do this, launch Jupyter notebook on the remote server as the following.\njupyter notebook --no-browser --port=8889  You can change the number for the port.\nThen, on your local machine, connect to your server and receive the data by typing the following command.\nssh -N -f -L localhost:8899:localhost:8889 [yourid]@[server_address]  Make sure that the second localhost number match the one on the remote server. Then, open up the web browser and go to \u0026ldquo;localhost:8899\u0026rdquo; by typing it in the address section. The web browser might ask the password, and it appears on the terminal where you launch Jupyter notebook.\n"
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/",
	"title": "Lectures",
	"tags": [],
	"description": "",
	"content": " Material related to lectures to be uploaded "
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/week3/",
	"title": "Week 3",
	"tags": [],
	"description": "",
	"content": " Week 3  NPZ model can be obtained from this link\n The derivation of Runge-Kutta methods : pdf\n  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/python/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " This is the code for python 2. There are some lines that do not work with python 3 because of the grammar changes.\nBasic introduction to python adapted from \u0026lsquo;data_containers.ipynb\u0026rsquo; by Eric Firing at Univ. of Hawaii\nLet\u0026rsquo;s start with numbers.\nNumbers and Booleans Python\u0026rsquo;s system of numbers is quite simple: there are\n integers floating point numbers complex numbers Boolean (True or False) types\n  The types are determined dynamically, so operations involving integers and floating point numbers yield floating point numbers.\nprint 1 + 2 print 1.0 + 2 print(1 + 2)  3 3.0 3  Division can be tricky because traditional computer languages use integer division on integers. This was the case by default with Python 2.\nprint 4/3 print 4.0/3  1 1.33333333333  There are some built-in functions that operate on numbers, e.g.:\nprint int(4/3) print round(4/3) print abs(4.2 - 5) # Note binary floating point inability # to represent a decimal number exactly. print pow(2, 3)  1 1.0 0.8 8  The pow() function can be replaced by\nprint 2**3  8  For more math functions, one can import the math module from the standard library:\nimport math print(math.sin(1)) print(math.sqrt(2))  0.841470984808 1.41421356237  We will rarely use the math module, however, because numpy provides the same functionality and much more.\nBoolean values are either True or False, and result from conditional expressions like this:\nprint(\u0026quot;1 \u0026gt; 2 is\u0026quot;, 1 \u0026gt; 2, \u0026quot;but 1 \u0026lt; 2 is\u0026quot;, 1 \u0026lt; 2)  ('1 \u0026gt; 2 is', False, 'but 1 \u0026lt; 2 is', True)  Here is a more complex conditional expression:\nprint(1 \u0026gt; 2 or 3 \u0026lt; 4)  True  Strings Python strings can be created with the str() function, and as literals using single quotes, double quotes, triple single quotes, or triple double quotes. The triples can enclose blocks of text spanning multiple lines. The following are all valid strings, each assigned to a variable name:\na = 'Single quotes' b = \u0026quot;Double quotes\u0026quot; c = \u0026quot;a string that has 'single quotes' inside it\u0026quot; d = \u0026quot;\u0026quot;\u0026quot;This is a multiline sentence string, ending with a linefeed. \u0026quot;\u0026quot;\u0026quot; e = ''' This is also valid. It starts and ends with a linefeed. ''' for example in (a, b, c, d, 3): print(example)  Single quotes Double quotes a string that has 'single quotes' inside it This is a multiline sentence string, ending with a linefeed. 3  Strings can be added (concatenated):\nprint(d + e)  This is a multiline sentence string, ending with a linefeed. This is also valid. It starts and ends with a linefeed.  Sequences: tuples and lists Tuples and lists are very general sequences\u0026ndash;that is, they are containers that preserve order, and they can contain any kind of object at all. There is one big practical difference: tuples are immutable, lists are mutable.\nTo create a tuple from scratch, use round parentheses and commas.\nt1 = (1, 2) t2 = (3, (4, 5), 7, 8, \u0026quot;some string\u0026quot;) print t1 print t2 print t1+t2 print t1*2  (1, 2) (3, (4, 5), 7, 8, 'some string') (1, 2, 3, (4, 5), 7, 8, 'some string') (1, 2, 1, 2)  Lists have many methods, and support addition and multiplication:\na = [\u0026quot;list1\u0026quot;, 1, 2] b = [\u0026quot;list2\u0026quot;, 3, 4] print a + b print a * 2 c = a.extend(b) # 'extend' adds elements to the end (assigning to c only to suppress printing) print a # This is identical to the sum, a + b, above. c = a.append(b) # 'append' addes the argument as a whole print a  ['list1', 1, 2, 'list2', 3, 4] ['list1', 1, 2, 'list1', 1, 2] ['list1', 1, 2, 'list2', 3, 4] ['list1', 1, 2, 'list2', 3, 4, ['list2', 3, 4]]  Sequences: indexing Lists, tuples, and strings all support the same indexing syntax.\n Python indexing starts from zero. A sequence of N elements therefore has indices ranging from 0 through N-1. Negative indices count backwards from the end; they are handled by adding N to the negative index, so -1 is the last element, -2 the one before that, etc. Basic indexing accesses a single element or a range (slice). A slice includes the start of a range but excludes the end. A slice has an optional step, for subsampling a range.  # Using the built-in \u0026quot;range\u0026quot; function, # make a list on which we can practice indexing: x = list(range(0, 100, 10)) print(x) print range(0,100,10)  [0, 10, 20, 30, 40, 50, 60, 70, 80, 90] [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]  Take the first 5 values, then the last 5 values:\nprint(x[:5]) print(x[-5:])  [0, 10, 20, 30, 40] [50, 60, 70, 80, 90]  See how easy that was? Now take every second value starting from the second (index 1):\nprint x[1::2]  [10, 30, 50, 70, 90] [40, 30, 20, 10, 0]  In the above examples we are indexing a list with a slice, so we are getting a list back, even if it has only one element in it, or if it is empty. If we want to get an element from the list, then we index with a single integer:\nprint(x[0]) print(x[-1])  0 90  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/homework/",
	"title": "Homework",
	"tags": [],
	"description": "",
	"content": " Homework problems will be uploaded here. "
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/week4/",
	"title": "Week 4",
	"tags": [],
	"description": "",
	"content": " Week 4  A link to the inertial oscillation example  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": " Python What is it and how to use it?\n"
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/week5/",
	"title": "Week 5",
	"tags": [],
	"description": "",
	"content": " Week 5  A link to the 1D wave example A link to the 2D SWE example  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/links/",
	"title": "Links",
	"tags": [],
	"description": "",
	"content": " Links to the models  MITgcm ROMS QG model  \nComputing program  Python  Miniconda  Jupyter Notebook  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/week7/",
	"title": "Week 7",
	"tags": [],
	"description": "",
	"content": " QG model  code to play : python code\n MITgcm barotropic gyre : link\n  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/week9/",
	"title": "Week 9",
	"tags": [],
	"description": "",
	"content": " More of the QG model  An example jupyter notebook  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/lectures/week11/",
	"title": "Week 11",
	"tags": [],
	"description": "",
	"content": " MITgcm closed basin examples  MITgcm barotropic gyre : link\n MITgcm baroclinic gyre : link\n data.diagnostics : link\n  "
},
{
	"uri": "https://hajsong.github.io/ATM9107/",
	"title": "ATM2106",
	"tags": [],
	"description": "",
	"content": " Ocean Modeling  Setting up ocean models and use them to address strudents\u0026rsquo; research questions.\nCourse Description The Ocean Modeling course aims to introduce fundamental formulation and numerical methods, as well as parameterizations, in ocean models. Starting from idealized simple models, we will explore ocean models with increasing complexity, and study ocean circulation and air-sea interactions. Additionally, this course will discuss varied packages that expands the functionality of ocean models. Builds on the lectures, students will set up their own ocean models, simulate it and analyze the output to gain a hand-on experience.\n해양모델링 수업은 해양모델의 기본방정식, 수치적인 계산 방법 및 파라미터 사용법을 소개함으로 시작됩니다. 학생들은 간단한 모델에서부터 전지구 해양모델까지 배우면서 해양의 순환과 대기-해양 상호작용을 시뮬레이션하게 될 것입니다. 또한, 이 수업은 해양모델에 들어가는 패키지들을 보여주고, 이들을 유용하게 사용하는 방법에 대해 알아볼 것입니다. 강의와 더불어 학생들은 자신들의 연구 주제에서 해양모델이 어떻게 쓰일 수 있는지 고민하고 실험하여, 여기에서 나온 결과를 분석하는 경험을 할 수 있게 될 것입니다.\nInstructor  송하준 Office : 과학관 #544 email : hajsong@yonsei.ac.kr telephone : 02-2123-2579  Class  과학관 #553 Lecture : 화 1:00 - 3:50 pm  Office hours Both Chunil and Hajoon will be happy to have office hours by appointment. Please email us!\nTarget students This course is intended for graduate students who are eager to learn about ocean circulation and its numerical simulation. This course is also intended for students who want to learn how to analyze the model result\nThe objective This is a hands-on class. Students will handle from a simple shallow-water model to state-of-the-art general ocean circulation model, as well as learn how to analyze the model results. After an in-depth introduction to the numerical ocean models, students enable to use ocean models to address their research questions.\nPrerequisite None, but the background in math and sciences is recommended.\nGrading  Homework : 50% Final project : 40% Attendance and participation : 10%   "
},
{
	"uri": "https://hajsong.github.io/ATM9107/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM9107/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]